//Link: https://leetcode.com/problems/delete-node-in-a-bst/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        //Fix Memory Leaks
        if(root)
            if(key < root->val) root->left = deleteNode(root->left, key);
            else if(key > root->val) root->right = deleteNode(root->right, key);
            else{ //Found the node to be deleted
                if(root->left == NULL and root->right == NULL){
                  //Case1: No Child i.e left node
                  //       Simple delete the node. Returning NULL so that the node will be set with NULL
                  return NULL; 
                } 
                else if(root->left == NULL || root->right == NULL){ 
                    //Case2: One Child.
                    //       Replace the node with the child node which ever exists.
                    return root->left ? root->left : root->right;
                }
                else{   
                    //Case3: Two Child
                    //       Replace the node with the greatest element of the left OR
                    //       Replace the node with the smallest element of the right
                    
                    //Here we find the greatest of the left and replace it
                    TreeNode* temp = root->left;                     //Going towards left tree
                    while(temp->right != NULL) temp = temp->right;   //Goind extreme right to find the largest on the left side
                    root->val = temp->val;                           // Replace
                    root->left = deleteNode(root->left, temp->val);
                }
            }
        return root;
    }
};
